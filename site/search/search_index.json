{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul> <pre><code>    graph TD\n    A[Working Directory] --&gt;|Add Changes| B(Git Staging Area)\n    B --&gt;|Commit| C[Git Repository]\n    C --&gt;|History| D((Commits))\n    style A fill:#FFD700,stroke:#000,stroke-width:2px\n    style B fill:#87CEEB,stroke:#000,stroke-width:2px\n    style C fill:#90EE90,stroke:#000,stroke-width:2px\n    style D fill:#FFF,stroke:#000,stroke-width:2px\n</code></pre>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <p>Tip</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>::: neubind.functions</p>"},{"location":"cheetsheet/","title":"Cheetsheet","text":"<p>1 / 1</p> <p>mkdocs material costume css</p> <p>1 / 1</p> <p>If you want to customize the appearance of your MkDocs Material theme documentation site by applying custom CSS, you can follow these steps:</p> <ol> <li> <p>Create a <code>custom.css</code> File:</p> <p>First, create a custom CSS file (e.g., <code>custom.css</code>) where you will define your custom styles. You can create this file in your project's root directory or in a specific folder, depending on your preference.</p> </li> <li> <p>Edit Your <code>mkdocs.yml</code> Configuration:</p> <p>Open your <code>mkdocs.yml</code> configuration file, and add or modify the following lines:</p> </li> </ol> <p>yaml</p> <pre><code>theme:\n  name: \"material\"\n  custom_dir: \"path_to_custom_css_folder\" # Optional\n</code></pre> <pre><code>Replace `'path_to_custom_css_folder'` with the relative path to the folder where your `custom.css` file is located. If you placed the `custom.css` file in your project's root directory, you can omit the `custom_dir` setting.\n</code></pre> <ol> <li> <p>Reference the Custom CSS in Your HTML Template:</p> <p>To include your custom CSS file in the generated documentation, you need to modify the HTML template. You can either create a custom template or directly modify the existing template used by the Material theme.</p> <p>To create a custom template, you can use the <code>md_template_dir</code> option in your <code>mkdocs.yml</code>:</p> <p>yaml</p> <p><code>yaml markdown_extensions:   - markdown_include.include md_template_dir: \"path_to_custom_template_folder\"</code></p> <p>Then, in your custom template folder, create an <code>extra_head.html</code> file, which will be included in the <code>&lt;head&gt;</code> section of each page. Inside this file, link to your custom CSS file:</p> <p>html</p> <p><code>html &lt;link rel=\"stylesheet\" href=\"{{ config.theme.custom_dir }}/custom.css\" /&gt;</code></p> </li> <li> <p>Apply Custom Styles:</p> </li> </ol> <p>In your <code>custom.css</code> file, you can add custom CSS styles to modify the appearance of your documentation. You can use CSS rules to target specific elements or classes and define your desired styles.</p> <p>For example, to change the background color of code blocks, you can use CSS like this:</p> <p>css</p> <pre><code>pre {\n  background-color: #f2f2f2;\n}\n</code></pre> <ol> <li> <p>Build Your Documentation:</p> <p>After making these changes, rebuild your documentation site by running the <code>mkdocs build</code> command.</p> </li> <li> <p>View Your Customized Documentation:</p> <p>Once the build process is complete, you can view your documentation with the custom CSS styles applied.</p> </li> </ol> <p>Keep in mind that customizing the appearance of your MkDocs Material theme documentation site using CSS allows you to tailor the design to your specific needs. You can modify fonts, colors, layout, and more to match your branding or improve the user experience.</p>"}]}